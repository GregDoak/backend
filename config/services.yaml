imports:
  - { resource: 'packages/data_dog_audit.yaml' }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    app_default_username: '%env(resolve:APP_DEFAULT_USERNAME)%'
    app_default_password: '%env(resolve:APP_DEFAULT_PASSWORD)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.event.authentication_failure_listener:
        class: 'App\EventListener\AuthenticationFailureListener'
        arguments: [ '@logger']
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }

    app.event.authentication_success_listener:
        class: 'App\EventListener\AuthenticationSuccessListener'
        arguments: [ '@logger' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    app.event.jwt_created_listener:
        class: 'App\EventListener\JWTCreatedListener'
        arguments: [ '@request_stack', '@doctrine.orm.entity_manager' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    app.event.jwt_invalid_listener:
        class: 'App\EventListener\JWTInvalidListener'
        arguments: [ '@logger' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_expired, method: onJWTExpired }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_invalid, method: onJWTInvalid }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound }

    app.handler.authentication_success:
        class: 'App\Security\Http\Authentication\AuthenticationSuccessHandler'
        arguments: ['@lexik_jwt_authentication.jwt_manager', '@event_dispatcher', '@doctrine.orm.entity_manager']

    app.logger.processor.reponse:
        class: 'App\Logger\ResponseLogger'
        arguments: ["@request_stack"]
        tags:
            - { name: monolog.processor, method: processRecord }

    app.user_provider:
        class: 'App\Security\User\UserProvider'
        arguments: [ '@doctrine.orm.entity_manager' ]

    gesdinet.jwtrefreshtoken:
        class: 'App\Service\RefreshToken'
        arguments: [ '@gesdinet.jwtrefreshtoken.authenticator', '@gesdinet.jwtrefreshtoken.user_provider', '@app.handler.authentication_success', '@lexik_jwt_authentication.handler.authentication_failure', '@gesdinet.jwtrefreshtoken.refresh_token_manager', '%gesdinet_jwt_refresh_token.ttl%', '%gesdinet_jwt_refresh_token.security.firewall%', '%gesdinet_jwt_refresh_token.ttl_update%' ]
        tags: ['controller.service_arguments']

    gesdinet.jwtrefreshtoken.authenticator:
        class: 'App\Security\Authenticator\RefreshTokenAuthenticator'

    gesdinet.jwtrefreshtoken.send_token:
        class: 'App\EventListener\AttachRefreshTokenOnSuccessListener'
        arguments: [ '@gesdinet.jwtrefreshtoken.refresh_token_manager', '%gesdinet_jwt_refresh_token.ttl%', '@validator', '@request_stack', '@doctrine.orm.entity_manager' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: attachRefreshToken }

    gesdinet.jwtrefreshtoken.user_provider:
        class: 'App\Security\Provider\RefreshTokenProvider'
        arguments: [ "@gesdinet.jwtrefreshtoken.refresh_token_manager" ]


